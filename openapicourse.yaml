openapi: 3.0.3
info:
  title: OpenAPI Course
  description: Specification for OpenAPI Course
  termsOfService: https://example.com/terms/
  version: 1.0.0
  contact:
    name: Ivo Eersels
    url: https://github.com/colwynB2K
    email: ivo.eersels@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://dev.example.com
    description: Development Server
  - url: https://qa/example.com
    description: QA Server
  - url: https://prod.example.com
    description: Production Server
paths:
  /v1/customers:
    get:
      responses:
        '200':
          description: List of Customers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerList"
  /v1/beers:
    get:
      responses:
        200:
          description: List of Beers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BeerPagedList"
        404:
          description: No Beers found (the end is near!)
components:
  schemas:
    Address:
      type: object
      properties:
        line1:
          type: string
          example: 123 Main
        line2:
          type: string
          example: Room 503
        city:
          type: string
          example: St Pete
        stateCode:
          type: string
          description: Two letter state code
          minLength: 2
          maxLength: 2
          enum:
            - AK
            - AL
            - AR
            - AZ
            - CA
        zipcode:
          type: string
          example: 33701
    Customer:
      type: object
      description: Customer object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          description: First Name
          type: string
          minLength: 2
          maxLength: 100
          example: "John"
        lastName:
          description: Last Name
          type: string
          minLength: 2
          maxLength: 100
          example: "Rambo"
        address:
          $ref: "#/components/schemas/Address"
    CustomerList:
      type: array
      minItems: 1
      maxItems: 100
      items:
        $ref: "#/components/schemas/Customer"
    Brewery:
      description: Brewery information
      type: object
      properties:
        name:
          description: Brewery Name
          type: string
          example: "InBev"
        location:
          description: Location
          type: string
          example: "Alken, Belgium"
    Beer:
      type: object
      description: Beer object
      properties:
        id:
          type: string
          format: uuid
        name:
          description: Name
          type: string
          example: "Cristal Alken"
        style:
          description: Style
          type: string
          enum:
            - ALE
            - PALE_ALE
            - IPA
            - WHEAT
            - LAGER
          example: "ALE"
        upc:
          description: UPC
          type: string
          example: "123456"
        price:
          description: Price in Euro per 33cl
          type: number
          example: 2.50
        stock:
          description: Stock quantity
          type: integer
          example: 666
        brewery:
          $ref: "#/components/schemas/Brewery"
    BeerList:
      type: array
      minItems: 1
      maxItems: 100
      items:
        $ref: "#/components/schemas/Beer"
    BeerPagedList:
      type: object
      allOf:  # The response must consist only of PagedResponse objects
        - $ref: "#/components/schemas/PagedResponse"
      properties:
        content:  # Specify that it will be a paged response containing a list of Beer objects
          $ref: "#/components/schemas/BeerList"
    PagedResponse:
      type: object
      properties:
        pageable:
          type: object
          properties:
            sort:
              type: object
              properties:
                sorted:
                  type: boolean
                unsorted:
                  type: boolean
            offset:
              type: integer
              format: int32
            pageNumber:
              type: integer
              format: int32
            pageSize:
              type: integer
              format: int32
            paged:
              type: boolean
            unpaged:
              type: boolean